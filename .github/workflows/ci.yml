name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DEPLOY_SERVER_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
      DEPLOY_SERVER_USER: ${{ secrets.DEPLOY_SERVER_USER }}
      DEPLOY_SERVER_SSH_KEY: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Stop existing service on port 8000
        run: |
          if sudo lsof -i -P -n | grep LISTEN | grep 8000; then
            echo "Port 8000 is already in use, stopping conflicting service."
            sudo fuser -k 8000/tcp
          else
            echo "Port 8000 is free."
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install docker-compose

      - name: Set environment variables
        run: |
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "DATABASE_URL=${DATABASE_URL}" >> .env

      - name: Build and run the containers
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for the database to be ready
        run: |
          until docker-compose exec db pg_isready --timeout=0; do sleep 1; done

      - name: Run migrations
        run: docker-compose exec web python manage.py migrate

      - name: Run tests
        run: docker-compose exec web python manage.py test

      - name: Populate planets database
        run: docker-compose exec web python manage.py fetch_planets

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}

      - name: Copy files to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --exclude '.git' ./ ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/home/${{ secrets.DEPLOY_SERVER_USER }}/app/

      - name: SSH and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
            cd /home/${{ secrets.DEPLOY_SERVER_USER }}/app/
            echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
            echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
            echo "DATABASE_URL=${DATABASE_URL}" >> .env
            sudo docker-compose down
            sudo docker-compose up -d --build
            sudo docker-compose exec web python manage.py migrate
            sudo docker-compose exec web python manage.py collectstatic --noinput
          EOF
