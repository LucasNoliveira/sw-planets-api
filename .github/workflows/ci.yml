name: Django CI/CD

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Stop existing service on port 5432
        run: |
          if sudo lsof -i -P -n | grep LISTEN | grep 5432; then
            echo "Port 5432 is already in use, stopping conflicting service."
            if sudo systemctl is-active --quiet postgresql; then
              sudo systemctl stop postgresql
            else
              sudo fuser -k 5432/tcp
            fi
          else
            echo "Port 5432 is free."
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install docker compose

      - name: Set environment variables
        run: |
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "DATABASE_URL=${DATABASE_URL}" >> .env

      - name: Build and run the containers
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for the database to be ready
        run: |
          until docker compose exec db pg_isready --timeout=0; do sleep 1; done

      - name: Run migrations
        run: docker compose exec web python manage.py migrate

      - name: Run tests
        run: docker compose exec web python manage.py test

      - name: Populate planets database
        run: docker compose exec web python manage.py fetch_planets

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy files to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --exclude '.git' ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/

      - name: SSH and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/app/
            echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
            echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
            echo "DATABASE_URL=${DATABASE_URL}" >> .env
            sudo docker compose down
            sudo docker compose up -d --build
            sudo docker compose exec web python manage.py migrate
            sudo docker compose exec web python manage.py collectstatic --noinput
          EOF
